name: Deploy to GCE VM

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCE_SSH_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCE_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
        env:
          GCE_KNOWN_HOSTS: ${{ secrets.GCE_KNOWN_HOSTS }}

      - name: Debug SSH connection
        run: |
          ssh -v -o StrictHostKeyChecking=no slay-canvas-deploy@${{ secrets.GCE_VM_IP }} whoami
        continue-on-error: true

      - name: Deploy to GCE (docker compose)
        run: |
          ssh -o StrictHostKeyChecking=no slay-canvas-deploy@${{ secrets.GCE_VM_IP }} << 'EOF'
          set -x
          cd /home/kjmannn17/slay_canvas

          # Update repo to latest main
          sudo git fetch origin main
          sudo git reset --hard origin/main

          # Write .env from GitHub Actions var
          sudo sh -c 'echo "${{ vars.ENV_FILE_PROD }}" > /home/kjmannn17/slay_canvas/.env'

          # If you used a systemd service before, stop/disable it so it doesn't conflict
          sudo systemctl stop slay_canvas.service || true
          sudo systemctl disable slay_canvas.service || true

          # Ensure docker daemon is running
          sudo systemctl start docker || true

          # Move into project (just to be explicit)
          cd /home/kjmannn17/slay_canvas

          # Use docker compose plugin if available, otherwise fallback to docker-compose
          if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
            # Pull (best-effort), then build & run in detached mode
            sudo docker compose --env-file .env pull || true
            sudo docker compose --env-file .env up -d --build --remove-orphans
          else
            # Fallback to docker-compose binary
            sudo docker-compose pull || true
            sudo docker-compose up -d --build --remove-orphans
          fi

          # Optional: cleanup dangling images (safe)
          sudo docker image prune -f || true

          EOF
